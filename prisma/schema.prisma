generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
  binaryTargets   = ["windows", "debian-openssl-1.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DB_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Account {
  id                 String            @id @default(uuid()) @db.VarChar(36)
  patient            Patient?
  doctor             Doctor?
  admin              Admin?
  permission         Permission[]
  isBlocked          Boolean           @map("is_blocked") @db.TinyInt()
  firstSurname       String?           @map("first_surname") @db.VarChar(64)
  secondSurname      String?           @map("second_surname") @db.VarChar(64)
  firstName          String?           @map("first_name") @db.VarChar(64)
  middleName         String?           @map("middle_name") @db.VarChar(64)
  documentIdentity   String?           @map("document_identity") @db.VarChar(32)
  gender             Gender?
  cellPhone          String?           @map("cell_phone") @db.VarChar(32)
  homePhone          String?           @map("home_phone") @db.VarChar(32)
  address            String?           @db.VarChar(256)
  ubigeoDepartmentId String?           @map("ubigeo_department_id")
  ubigeoDepartment   UbigeoDepartment? @relation(fields: [ubigeoDepartmentId], references: [id])
  ubigeoProvinceId   String?           @map("ubigeo_province_id")
  ubigeoProvince     UbigeoProvince?   @relation(fields: [ubigeoProvinceId], references: [id])
  ubigeoDistrictId   String?           @map("ubigeo_district_id")
  ubigeoDistrict     UbigeoDistrict?   @relation(fields: [ubigeoDistrictId], references: [id])
  credentialId       String?           @unique @map("credential_id") @db.VarChar(36)
  credential         Credential?       @relation(fields: [credentialId], references: [id])
  refreshTokens      RefreshToken[]
  recoveryKeys       RecoveryKey[]
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")

  @@map("accounts")
}

model Patient {
  // TODO: Zerofill isn't supported by prisma
  // The field 'medicalRecordNumber' must be of that type and with a limit of 6 digits
  // See: https://github.com/prisma/prisma/discussions/13988
  // It's possible to add it modifying manually the migration file
  medicalRecordNumber         Int                     @id @unique @default(autoincrement()) @map("medical_record_number")
  bloodType                   String?                 @map("blood_type") @db.VarChar(8)
  allergies                   String?                 @db.VarChar(256)
  personalPathologicalHistory String?                 @map("personal_pathological_history") @db.VarChar(256)
  familyPathologicalHistory   String?                 @map("family_pathological_history") @db.VarChar(256)
  accountId                   String                  @unique @map("account_id")
  account                     Account                 @relation(fields: [accountId], references: [id])
  Triages                     Triage[]
  DailyAttendanceRecord       DailyAttendanceRecord[]

  @@map("patients")
}

model Doctor {
  licenseNumber String  @id @unique @map("license_number") @db.VarChar(32)
  accountId     String  @unique @map("account_id")
  account       Account @relation(fields: [accountId], references: [id])

  @@map("doctors")
}

model Admin {
  id        Int     @id @default(autoincrement())
  accountId String  @unique @map("account_id")
  account   Account @relation(fields: [accountId], references: [id])

  @@map("admins")
}

model UbigeoDepartment {
  id             String           @id
  name           String           @unique @db.VarChar(64)
  UbigeoProvince UbigeoProvince[]
  UbigeoDistrict UbigeoDistrict[]
  Account        Account[]

  @@map("ubigeo_departments")
}

model UbigeoProvince {
  id             String           @id
  name           String           @db.VarChar(64)
  departmentId   String           @map("department_id")
  department     UbigeoDepartment @relation(fields: [departmentId], references: [id])
  UbigeoDistrict UbigeoDistrict[]
  Account        Account[]

  @@map("ubigeo_provinces")
}

model UbigeoDistrict {
  id           String           @id
  name         String           @db.VarChar(64)
  provinceId   String           @map("province_id")
  province     UbigeoProvince   @relation(fields: [provinceId], references: [id])
  departmentId String           @map("department_id")
  department   UbigeoDepartment @relation(fields: [departmentId], references: [id])
  Account      Account[]

  @@map("ubigeo_districts")
}

model Credential {
  id         String   @id @default(uuid()) @db.VarChar(36)
  identifier String   @unique() @db.VarChar(32)
  secret     String   @db.VarChar(64)
  account    Account?

  @@map("credentials")
}

model RefreshToken {
  id        String  @id @default(uuid()) @db.VarChar(36)
  accountId String  @map("account_id") @db.VarChar(36)
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model RecoveryKey {
  id        String  @id @default(uuid()) @db.VarChar(36)
  accountId String  @map("account_id") @db.VarChar(36)
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("recovery_keys")
}

model Triage {
  id                    Int                     @id @default(autoincrement())
  medicalRecordNumber   Int                     @map("medical_record_number")
  patient               Patient?                @relation(fields: [medicalRecordNumber], references: [medicalRecordNumber], onDelete: Cascade)
  triageType            TriageType              @map("triage_type")
  time                  DateTime                @default(now()) @db.DateTime(0)
  bloodPressure         String?                 @map("blood_pressure") @db.VarChar(10)
  pulse                 Int?                    @db.Int
  height                Int?                    @db.Int
  weight                Int?                    @db.Int
  bloodOxygen           Int?                    @map("blood_oxygen") @db.Int
  temperature           Float                   @db.Float()
  respiratoryRate       Int?                    @map("respiratory_rate") @db.Int
  DailyAttendanceRecord DailyAttendanceRecord[]
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")

  @@map("triages")
}

model DailyAttendanceRecord {
  id                  Int            @id @default(autoincrement())
  medicalRecordNumber Int            @map("medical_record_number")
  patient             Patient?       @relation(fields: [medicalRecordNumber], references: [medicalRecordNumber], onDelete: Cascade)
  triageId            Int            @map("triage_id")
  triage              Triage?        @relation(fields: [triageId], references: [id], onDelete: Cascade)
  icd10DiagnosisId    Int            @map("icd10_diagnosis_id")
  icd10Diagnosis      Icd10Diagnosis @relation(fields: [icd10DiagnosisId], references: [id])
  datetime            DateTime       @default(now()) @db.DateTime(0)
  specialtyId         Int            @map("specialty_id")
  specialty           Specialty      @relation(fields: [specialtyId], references: [id])

  @@map("daily_attendance_records")
}

model Icd10Category {
  id          Int          @id @default(autoincrement())
  code        String       @unique @db.VarChar(8)
  description String       @db.VarChar(256)
  chapterId   Int          @map("chapter_id")
  chapter     Icd10Chapter @relation(fields: [chapterId], references: [id])
  Icd10Group  Icd10Group[]

  @@map("icd10_categories")
}

model Icd10Chapter {
  id            Int             @id @default(autoincrement())
  code          String          @unique @db.VarChar(8)
  description   String          @db.VarChar(128)
  Icd10Category Icd10Category[]

  @@map("icd10_chapters")
}

model Icd10Group {
  id             Int              @id @default(autoincrement())
  code           String           @unique @db.VarChar(8)
  description    String           @db.VarChar(256)
  categoryId     Int              @map("category_id")
  category       Icd10Category    @relation(fields: [categoryId], references: [id])
  Icd10Diagnosis Icd10Diagnosis[]

  @@map("icd10_groups")
}

model Icd10Diagnosis {
  id                    Int                     @id @default(autoincrement())
  code                  String                  @unique @db.VarChar(8)
  description           String                  @db.VarChar(256)
  groupId               Int                     @map("group_id")
  group                 Icd10Group              @relation(fields: [groupId], references: [id])
  DailyAttendanceRecord DailyAttendanceRecord[]

  @@map("icd10_diagnoses")
}

model Specialty {
  id                    Int                     @id @default(autoincrement())
  description           String                  @db.VarChar(256)
  status                Boolean                 @default(true)
  DailyAttendanceRecord DailyAttendanceRecord[]

  @@map("specialties")
}

model Role {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  subroles Subrole[]

  @@map("roles")
}

model Subrole {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  roleId      Int
  role        Role         @relation(fields: [roleId], references: [id])
  permissions Permission[]

  @@map("subroles")
}

model Permission {
  id        Int      @id @default(autoincrement())
  accountId String   @map("account_id")
  subroleId Int?     @map("subrole_id")
  account   Account  @relation(fields: [accountId], references: [id])
  subrole   Subrole? @relation(fields: [subroleId], references: [id])

  @@unique([accountId, subroleId])
  @@map("permissions")
}

enum Gender {
  MALE    @map("1")
  FEMALE  @map("2")
  NEITHER @map("3")

  @@map("gender")
}

enum TriageType {
  NEW        @map("new")
  CONTINUOUS @map("continuous")

  @@map("triage_type")
}
